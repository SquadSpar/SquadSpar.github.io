{"version":3,"sources":["components/BackgroundWithOverlay.jsx","containers/Home.jsx","containers/Enter.jsx","containers/Room.jsx","App.js","serviceWorker.js","index.js"],"names":["BackgroundWithOverlay","props","background","backgroundImage","imgUrl","position","top","left","height","width","zIndex","backgroundSize","backgroundRepeat","overlay","backgroundColor","alpha","style","Home","createRoom","history","push","joinRoom","roomNumber","prompt","console","log","this","className","to","src","alt","onClick","Component","Enter","myChangeHandler","event","name","target","value","setState","state","userName","roomCode","Form","type","onChange","Room","timer","links","startTimer","setInterval","match","params","number","App","exact","path","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAEe,SAASA,EAAsBC,GAC5C,IAAIC,EAAa,CACfC,gBACE,eAA+CF,EAAMG,OACvDC,SAAU,QACVC,IAAK,EACLC,KAAM,EACNC,OAAQ,OACRC,MAAO,OACPC,QAAS,EACTC,eAAgB,QAChBC,iBAAkB,QAGhBC,EAAU,CACZC,gBAAiB,iBAAmBb,EAAMc,MAAQ,IAClDV,SAAU,WACVC,IAAK,EACLC,KAAM,EACNE,MAAO,OACPD,OAAQ,QAGV,OACE,yBAAKQ,MAAOd,GACV,yBAAKc,MAAOH,K,gBCgDHI,E,2MAjEbC,WAAa,WAEX,EAAKjB,MAAMkB,QAAQC,KAAK,iB,EAI1BC,SAAW,WACT,IAAIC,EAAaC,OAAO,2BACxBC,QAAQC,IAAIH,GAEZ,EAAKrB,MAAMkB,QAAQC,KAAnB,gBAAiCE,K,wEAMjC,OADAE,QAAQC,IAAIC,MAEV,yBAAKC,UAAU,QACb,kBAAC3B,EAAD,CAAuBI,OAAO,WAAWW,MAAM,OAC/C,wBAAIY,UAAU,WAAd,0BACA,6CACA,yBAAKA,UAAU,aACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,kBAAC,IAAD,CAAMC,GAAG,UACP,yBACEC,IAAI,2BACJF,UAAU,UACVG,IAAI,kBAGR,4BAAQC,QAASL,KAAKL,UAAtB,cAEF,yBAAKM,UAAU,cACb,kBAAC,IAAD,CAAMC,GAAG,KACP,yBACEC,IAAI,2BACJF,UAAU,UACVG,IAAI,kBAGR,4BAAQC,QAASL,KAAKR,YAAtB,uB,GA1CKc,a,gBC4BJC,E,YA5Bb,WAAYhC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRiC,gBAAkB,SAAAC,GAChB,IAAIC,EAAOD,EAAME,OAAOD,KACpBE,EAAQH,EAAME,OAAOC,MACzB,EAAKC,SAAL,eAAiBH,EAAOE,KARxB,EAAKE,MAAQ,CACXC,SAAU,GACVC,SAAU,IAJK,E,sEAajB,OACE,oCACE,kBAAC1C,EAAD,CAAuBI,OAAO,WAAWW,MAAM,OAC/C,kBAAC4B,EAAA,EAAD,KACE,sCACA,4DACA,2BAAOC,KAAK,OAAOR,KAAK,WAAWS,SAAUnB,KAAKQ,kBAClD,+CACA,2BAAOU,KAAK,OAAOR,KAAK,WAAWS,SAAUnB,KAAKQ,wB,GAtBxCF,aCLCc,E,2MAEjBN,MAAQ,CACJO,MAAO,GACPC,MAAQ,CAAC,uC,EASbC,WAAa,WACTC,aAAY,WACR,EAAKX,SAAS,CACVQ,MAAM,EAAKP,MAAMO,MAAM,MAE7B,M,mFATFrB,KAAKuB,e,+BAcL,OACI,6BAEKvB,KAAKc,MAAMQ,MACXtB,KAAKc,MAAMO,MAHhB,QAIUrB,KAAKzB,MAAMkD,MAAMC,OAAOC,Y,GA5BZrB,a,gBCgBnBsB,MAVf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAAxD,GAAK,OAAI,kBAAC,EAASA,MACjD,kBAAC,IAAD,CAAOsD,OAAK,EAACC,KAAK,SAASC,OAAQ,SAAAxD,GAAK,OAAI,kBAAC,EAAUA,MACvD,kBAAC,IAAD,CAAOsD,OAAK,EAACC,KAAK,gBAAgBC,OAAQ,SAAAxD,GAAK,OAAI,kBAAC,EAASA,QCF/CyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASV,MACvB,2DCVNW,IAASL,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFM,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.440dffe9.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function BackgroundWithOverlay(props) {\n  let background = {\n    backgroundImage:\n      \"url(\" + process.env.PUBLIC_URL + \"/images/\" + props.imgUrl,\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    height: \"100%\",\n    width: \"100%\",\n    zIndex: -1,\n    backgroundSize: \"cover\",\n    backgroundRepeat: \"none\"\n  };\n\n  let overlay = {\n    backgroundColor: \"rgba(0, 0, 0, \" + props.alpha + \")\",\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\"\n  };\n\n  return (\n    <div style={background}>\n      <div style={overlay}></div>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// Project Components\nimport StyledButton from \"../components/StyledButton\";\nimport BackgroundWithOverlay from \"../components/BackgroundWithOverlay\";\n\nimport \"../stylesheets/home.scss\";\nimport axios from \"axios\";\nclass Home extends Component {\n  createRoom = () => {\n    //axios.post('/createRoom').then(res=>{ //Get endpoint from Neil\n    this.props.history.push(\"/newRoomPage\");\n    //})\n  };\n\n  joinRoom = () => {\n    let roomNumber = prompt(\"whats your room number?\");\n    console.log(roomNumber);\n    //axios.post('/joinRoom').then(res=>{ //Get endpoint from Neil\n    this.props.history.push(`/room/${roomNumber}`);\n    //})\n  };\n\n  render() {\n    console.log(this);\n    return (\n      <div className=\"home\">\n        <BackgroundWithOverlay imgUrl=\"home.png\" alpha=\".6\" />\n        <h1 className=\"welcome\">Welcome to Squad Spur!</h1>\n        <p>Pick your role</p>\n        <div className=\"pick-role\">\n          <div className=\"roles\">\n            <div className=\"role-links\">\n              <Link to=\"/enter\">\n                <img\n                  src=\"../../images/student.png\"\n                  className=\"options\"\n                  alt=\"student icon\"\n                />\n              </Link>\n              <button onClick={this.joinRoom}>Join Room</button>\n            </div>\n            <div className=\"role-links\">\n              <Link to=\"/\">\n                <img\n                  src=\"../../images/teacher.png\"\n                  className=\"options\"\n                  alt=\"teacher icon\"\n                />\n              </Link>\n              <button onClick={this.createRoom}>Create Room</button>\n            </div>\n          </div>\n        </div>\n      </div>\n      /* <Link to=\"/\">\n          <img src=\"../../images/student.png\" alt=\"student icon\" />\n        </Link>\n        <StyledButton\n          title=\"STUDENT | Join Room\"\n          onClickFunction={this.joinRoom}\n        />\n\n        <Link to=\"/\">\n          <img src=\"../../images/teacher.png\" alt=\"teacher icon\" />\n        </Link>\n        <StyledButton\n          title=\"TEACHER | Create Room\"\n          onClickFunction={this.createRoom}\n        /> */\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport { Form } from \"react-bootstrap\";\n\n// Project Components\nimport BackgroundWithOverlay from \"../components/BackgroundWithOverlay\";\n\n// import '../../stylesheets/Enter.scss'\n\nclass Enter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userName: \"\",\n      roomCode: \"\"\n    };\n  }\n  myChangeHandler = event => {\n    let name = event.target.name;\n    let value = event.target.value;\n    this.setState({ [name]: value });\n  };\n  render() {\n    return (\n      <>\n        <BackgroundWithOverlay imgUrl=\"home.png\" alpha=\".6\" />\n        <Form>\n          <h1>Hello </h1>\n          <p>Enter your codewars username:</p>\n          <input type=\"text\" name=\"userName\" onChange={this.myChangeHandler} />\n          <p>Enter room code:</p>\n          <input type=\"text\" name=\"roomCode\" onChange={this.myChangeHandler} />\n        </Form>\n      </>\n    );\n  }\n}\n\nexport default Enter;\n","import React, { Component } from 'react'\nimport Axios from 'axios'\n\nexport default class Room extends Component {\n\n    state = {\n        timer: 60, \n        links : [`https://codewars.com/2984698246589`]\n    }\n\n    componentDidMount(){\n        //Axios.get(`/room/${tjhis.props.match.params.number}`) //Get endpoint from neil setState with new links \n        this.startTimer()\n    }\n\n\n    startTimer = () => {\n        setInterval(()=>{\n            this.setState({\n                timer:this.state.timer-1\n            })\n        },1000)\n\n    }\n\n    render() {\n        return (\n            <div> \n\n                {this.state.links}\n                {this.state.timer}\n                Room {this.props.match.params.number}\n            </div>\n        )\n    }\n}\n","import React from \"react\";\n// import logo from './logo.svg';\nimport Home from \"./containers/Home\";\nimport Enter from \"./containers/Enter\";\nimport Room from \"./containers/Room\";\n\nimport \"./App.css\";\nimport { Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" render={props => <Home {...props} />} />\n      <Route exact path=\"/enter\" render={props => <Enter {...props} />} />\n      <Route exact path=\"/room/:number\" render={props => <Room {...props} />} />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}